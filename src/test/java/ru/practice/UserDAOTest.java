package ru.practice;

import jakarta.persistence.EntityExistsException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.exception.ConstraintViolationException;
import org.hibernate.exception.DataException;
import org.junit.jupiter.api.*;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import ru.practice.dao.UserDAO;
import ru.practice.models.User;

import java.sql.SQLException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;

//@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@Testcontainers
public class UserDAOTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    private static SessionFactory sessionFactory;
    private static UserDAO userDAO;

    @BeforeAll
    static void initHibernate() throws SQLException {
        Configuration configuration = new Configuration()
                .addAnnotatedClass(User.class);

        configuration.setProperties(new Properties() {{
            setProperty("hibernate.connection.url", postgres.getJdbcUrl());
            setProperty("hibernate.connection.username", postgres.getUsername());
            setProperty("hibernate.connection.password", postgres.getPassword());
        }});

        sessionFactory = configuration.buildSessionFactory();

        Session session = null;
        Transaction transaction = null;

        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();

            session.createNativeQuery("create table users(\n" +
                    "    id int primary key generated by default as identity,\n" +
                    "    name varchar(100) not null,\n" +
                    "    email varchar(100) not null unique,\n" +
                    "    age int check (age between 0 and 120) not null,\n" +
                    "    created_at timestamp not null\n" +
                    ")"
            ).executeUpdate();

            transaction.commit();
        } catch (Exception e) {
            if (transaction != null && transaction.getStatus().isActive()) {
                transaction.rollback();
            }
            throw e;
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }

    @BeforeEach
    void initDAO() {
        userDAO = new UserDAO(sessionFactory);
    }

    @BeforeEach
    void resetDB() {
        Session session = null;
        Transaction transaction = null;

        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();

            session.createNativeQuery("truncate table users "
            ).executeUpdate();

            transaction.commit();
        } catch (Exception e) {
            if (transaction != null && transaction.getStatus().isActive()) {
                transaction.rollback();
            }
            throw e;
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }

    @AfterAll
    static void afterAll() {
        if (sessionFactory != null) {
            sessionFactory.close();
        }
    }

    @Test
    public void testSave_WhenOk() {
        String name = "Test";
        String email = "test@ya.ru";
        int age = 89;
        User user = new User(name, email, age);

        userDAO.save(user);
        Optional<User> result = userDAO.readByEmail(email);

        assertTrue(result.isPresent());
        assertNotEquals(0, result.get().getId());
        assertEquals(name, result.get().getName());
        assertEquals(email, result.get().getEmail());
        assertEquals(age, result.get().getAge());
    }

    @Test
    public void testSave_whenNull() {
        User user = null;

        Exception exception = assertThrows(NullPointerException.class, () -> userDAO.save(user));
        assertEquals("User cant be null", exception.getMessage());
    }

    @Test
    public void testSave_whenNotUnique() {
        String name = "Test";
        String email = "test@ya.ru";
        int age = 89;
        User user = new User(name, email, age);

        userDAO.save(user);
        assertThrows(EntityExistsException.class, () -> userDAO.save(user));
    }

    @Test
    public void testSave_whenConstraintViolations() {
        String name = "";
        String email = "test@ya.ru";
        int age = 281;
        User user = new User(name, email, age);

        assertThrows(ConstraintViolationException.class, () -> userDAO.save(user));
    }

    @Test
    public void testSave_whenDataTypeSizeViolations() {
        // 110 a
        String name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
        String email = "test@ya.ru";
        int age = 28;
        User user = new User(name, email, age);

        assertThrows(DataException.class, () -> userDAO.save(user));
    }

    @Test
    public void testReadAll_whenOk() {
        User user1 = new User("name", "email", 56);
        User user2 = new User("name1", "email1", 54);
        List<User> users = List.of(user1, user2);

        userDAO.save(user1);
        userDAO.save(user2);
        List<User> result = userDAO.readAll();

        assertEquals(2, users.size());
        assertEquals(users, result);
    }

    @Test
    public void testReadAll_whenNoUsersInDB() {
        List<User> empty = List.of();

        List<User> result = userDAO.readAll();

        assertTrue(result.isEmpty());
        assertEquals(empty, result);
    }

    @Test
    public void testReadById_whenOk() {
        User user1 = new User("name", "email", 56);

        userDAO.save(user1);
        Optional<User> expected = userDAO.readByEmail("email");
        Optional<User> result = userDAO.readById(expected.get().getId());

        assertNotNull(result);
        assertTrue(result.isPresent());
        assertEquals(user1, result.get());
    }

    @Test
    public void testReadById_UserWithThisIdIsNotExist() {

        Optional<User> result = userDAO.readById(1);

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void testReadByEmail_whenOk() {
        String email = "email";
        User user1 = new User("name", email, 56);

        userDAO.save(user1);
        Optional<User> result = userDAO.readByEmail(email);

        assertNotNull(result);
        assertTrue(result.isPresent());
        assertEquals(user1, result.get());
    }

    @Test
    public void testReadByEmail_whenEmailIsNull() {
        String email = null;

        assertThrows(NullPointerException.class, () -> userDAO.readByEmail(email));
    }

    @Test
    public void testUpdate_whenOk() {
        User user = new User("name1", "email1", 78);
        String newName = "name new";
        String newEmail = "email new";
        int newAge = 79;

        userDAO.save(user);
        User userToBeUpdated = userDAO.readByEmail("email1").get();
        userToBeUpdated.setName(newName);
        userToBeUpdated.setEmail(newEmail);
        userToBeUpdated.setAge(newAge);
        userDAO.update(userToBeUpdated);
        Optional<User> result = userDAO.readById(userToBeUpdated.getId());

        assertNotNull(result);
        assertEquals(userToBeUpdated, result.get());
    }

    @Test
    public void testUpdate_whenUserIsNull() {
        User user = null;

        assertThrows(NullPointerException.class, () -> userDAO.update(user));
    }

    @Test
    public void testUpdate_whenUserDoesNotExist() {
        User user = new User("name1", "email1", 78);

        assertThrows(NoSuchElementException.class, () -> userDAO.update(user));
    }
}
